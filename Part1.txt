Part 1

Q.1 Ans: Operators in JavaScript are symbols that perform operations on operands. Operands can be
variables, values, or expressions. Operators are essential in prorammin because they allow us to manipulate
data and perform calculations.
They are essential because they are use to-
1.perform Arithmetic operation.
2.Assin operator.
3.Compare Operator.
4.Perform loical operations

Q.2 Ans: 
1.Arithmetic Operators: These operators perform mathematical operations on operands. Operands can be
numbers or variables.
Ex. //Addition
const sum  = 2 + 3; 
    //Subtraction
const sum = 3 - 2;
   //Multiplication
const sum  = 2 * 3;
   //Division
const sum  = 20 / 2;
   //Exponention
const sum  = 2 ** 3;
   //Modulo
const sum  = 10 % 3;

console.log("constsum")

2.AssignmentWOperators:These operators assin values to variables.
// Assignment operator (=)
const myVariable = 10;
// Addition assignment operator (+=)
myVariable += 5; // myVariable is now equal to 15
// Subtraction assignment operator (-=)
myVariable -= 5; // myVariable is now equal to 10
// Multiplication assignment operator (*=)
myVariable *= 2; // myVariable is now equal to 20
// Division assignment operator (/=)
myVariable /= 2; // myVariable is now equal to 10
// Modulo assignment operator (%=)
myVariable %= 3; // myVariable is now equal to 1

3.Comparison Operators: These operators compare two values and return a Boolean value (true or false).
// Equal to (==)
const isEqual = 10 == 10; // isEqual is now equal to true
// Not equal to (!=)
const isNotEqual = 10 != 10; // isNotEqual is now equal to false
// Greater than (>)
const isGreaterThan = 10 > 5; // isGreaterThan is now equal to true
// Less than (<)
const isLessThan = 10 < 5; // isLessThan is now equal to false
// Greater than or equal to (>=)
const isGreaterThanOrEqual = 10 >= 10; // isGreaterThanOrEqual is now equal to
true
// Less than or equal to (<=)
const isLessThanOrEqual = 10 <= 5; // isLessThanOrEqual is now equal to false.

4.Logical Operators: These operators perform logical operations on Boolean values.
// AND (&&)
const isAndTrue = true && true; // isAndTrue is now equal to true
const isAndFalse = true && false; // isAndFalse is now equal to false
// OR (||)
const isOrTrue = true || false; // isOrTrue is now equal to true
const isOrFalse = false || false; // isOrFalse is now equal to false
// NOT (!)
const isNotTrue = !true; // isNotTrue is now equal to false
const isNotFalse = !false; // isNotFalse is now equal to true.

Q.3 Ans: Operators in JavaScript are categorized based on the number of operands they required into the
following groups:
1.Unary operators: Unary operators operate on a single operand
2.Binary operators: Binary operators operate on two operands.

Q.4 Ans: Precedence-- refers to the order in which operators are evaluated when multiple operators are present
in an expression. Operators with higher precedence are executed first. For example, in the expression 3 + 5 * 2,
multiplication (*) has higher precedence than addition (+), so the multiplication is performed first.
Associativity refers to the order in which operators of the same precedence are evaluated. Some operators
associate left to right, meaning they are evaluated from left to right. Others associate right to left, meaning they
are evaluated from right to left.

Understanding precedence and associativity is important for severa2 reasonsa
1.Understanding the order of precedence ensures that expressions are
evaluated correctly, preventing potential errors or unexpected results
2.When working with complex expressions, knowing the precedence and associativity
allows developers to write code that behaves as intended, making it easier to reason about and maintain
3.In case of unexpected results, knowing operator precedence and
associativity helps in debugging and identifying the root cause of issues
4.Knowledge of precedence and associativity can be used to optimize code by avoiding
unnecessary parentheses and ensuring efficient computation.
